http://learn.knockoutjs.com/#/?tutorial=intro


Introduction
============

Data-bind
---------
data-bind attributes are how Knockout lets you declaratively associate viewmodel properties with DOM elements. 
You just used the text binding to assign text to your DOM elements.


	HTML
	----

	<!-- This is a *view* - HTML markup that defines the appearance of your UI -->

	<p>First name: <strong data-bind="text: firstName">todo</strong></p>
	<p>Last name: <strong data-bind="text: lastName">todo</strong></p>


	JS
	--

	// This is a simple *viewmodel* - JavaScript that defines the data and behavior of your UI

	function AppViewModel() {
    	     this.firstName = "Bert";
    	     this.lastName = "Bertington";
	}

	// Activates knockout.js
	
	ko.applyBindings(new AppViewModel());


	Output
	------

	First name: Bert

	Last name: Bertington


Making the data editable
------------------------

	<p>First name: <input data-bind="value: firstName"/></p>
	<p>Last name: <input data-bind="value: lastName"/></p>


Observable
----------
observables - these are properties that automatically will issue notifications whenever their value changes.
Update your viewmodel to make the firstName and lastName properties observable using ko.observable:

	JS
	--

	function AppViewModel() {
    	     this.firstName = ko.observable("Bert");
    	     this.lastName = ko.observable("Bertington");
	}

	ko.applyBindings(new AppViewModel());


	HTML
	----


	<p>First name: <strong data-bind="text: firstName">todo</strong></p>
	<p>Last name: <strong data-bind="text: lastName">todo</strong></p>

	<p>First name: <input data-bind="value: firstName"/></p>
	<p>Last name: <input data-bind="value: lastName"/></p>

	Output
	------

	First name: Bert
	Last name: Bertington

	//Input
	First name: Bert	

	//Input
	Last name: Bertington


Computed values
---------------
computed properties - these are observable (i.e., they notify on change) and 
they are computed based on the values of other observables.

	 this.fullName = ko.computed(function() {
    	     return this.firstName() + " " + this.lastName();    
	 }, this);


	JS
	--

	function AppViewModel() {
    	     this.firstName = ko.observable("Bert");
    	     this.lastName = ko.observable("Bertington");
    
    	     this.fullName = ko.computed(function() {
    	          return this.firstName() + " " + this.lastName();    
	     }, this);
    
	}

	ko.applyBindings(new AppViewModel());


	HTML
	----

	<p>First name: <strong data-bind="text: firstName"></strong></p>
	<p>Last name: <strong data-bind="text: lastName"></strong></p>
	<p>Full name: <strong data-bind="text: fullName"></strong></p>


	Output
	------

	First name: Bert
	Last name: Bertington
	Full name: Bert Bertington


Upper-case
----------
Updating the viewmodel
First, add a capitalizeLastName function to the viewmodel to implement this behavior:

	this.capitalizeLastName = function() {
        	var currentVal = this.lastName();        // Read the current value
        	this.lastName(currentVal.toUpperCase()); // Write back a modified value
    	};

Next, add a button to the view, 
using the click binding to associate clicks with the viewmodel function you just added:

	<button data-bind="click: capitalizeLastName">Go caps</button>


	JS
	--

	function AppViewModel() {
    	     this.firstName = ko.observable("Bert");
    	     this.lastName = ko.observable("Bertington");
    
    	     this.fullName = ko.computed(function() {
     	          return this.firstName() + " " + this.lastName();    
	     }, this);
    
      	     this.capitalizeLastName = function() {
                  var currentVal = this.lastName();        // Read the current value
                  this.lastName(currentVal.toUpperCase()); // Write back a modified value
    	     };
    
	}


	ko.applyBindings(new AppViewModel());

	HTML
	----

	<p>First name: <strong data-bind="text: firstName"></strong></p>
	<p>Last name: <strong data-bind="text: lastName"></strong></p>
	<p>Full name: <strong data-bind="text: fullName"></strong></p>

	<button data-bind="click: capitalizeLastName">Go caps</button>


	Output:
	-------

	First name: Bert
	Last name: BERTINGTON
	Full name: Bert BERTINGTON

	|Go caps| //Button



Working with Lists and Collections
==================================

ko.observableArray
------------------
that's the observable equivalent of a regular array, which means it can 
automatically trigger UI updates whenever items are added or removed.

	Notice that, in the example below, because the meal property is an observable, 
	it's important to invoke  meal() as a function (to obtain its current value) 
	before attempting to read sub-properties. In other words, write meal().price, not meal.price.


	HTML
	----
	
	<h2>Your seat reservations</h2>

	<table>
    	     <thead>
                  <tr>
            	       <th>Passenger name</th>
                       <th>Meal</th>
                       <th>Surcharge</th>        
                  </tr>
    	     </thead>
    	
    	     <tbody data-bind="foreach: seats">
                  <tr>
                       <td data-bind="text: name"></td>
                       <td data-bind="text: meal().mealName"></td>
                       <td data-bind="text: meal().price"></td>
                  </tr>    
    	     </tbody>
        </table>

	
	JS
	--

	// Class to represent a row in the seat reservations grid
	
	function SeatReservation(name, initialMeal) {
    	     var self = this;
             self.name = name;
             self.meal = ko.observable(initialMeal);
	}

	// Overall viewmodel for this screen, along with initial state

	function ReservationsViewModel() {
             var self = this;

        // Non-editable catalog data - would come from the server
    
	self.availableMeals = [
             { mealName: "Standard (sandwich)", price: 0 },
             { mealName: "Premium (lobster)", price: 34.95 },
             { mealName: "Ultimate (whole zebra)", price: 290 }
    	];    
   
    	// Editable data
    	
	self.seats = ko.observableArray([
             new SeatReservation("Steve", self.availableMeals[0]),        
             new SeatReservation("Bert", self.availableMeals[0])
    	]);
	}

	ko.applyBindings(new ReservationsViewModel());


	Output
	------

	Your seat reservations

	Passenger name	Meal	Surcharge
	Steve	Standard (sandwich)	0
	Bert	Standard (sandwich)	0